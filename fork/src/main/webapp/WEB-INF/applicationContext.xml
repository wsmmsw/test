<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task-4.0.xsd">

    <import resource="spring-dubbo.xml"/>
    <import resource="spring-rabbit.xml"/>

    <task:annotation-driven/>

    <!-- 自动扫描oms包 ,将带有注解的类 纳入spring容器管理 -->
    <context:component-scan base-package="com.baicheng.fork"></context:component-scan>

    <!-- dataSource 配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${ds.initialSize}"/>
        <property name="minIdle" value="${ds.minIdle}"/>
        <property name="maxActive" value="${ds.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${ds.maxWait}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}"/>

        <property name="validationQuery" value="${ds.validationQuery}"/>
        <property name="testWhileIdle" value="${ds.testWhileIdle}"/>
        <property name="testOnBorrow" value="${ds.testOnBorrow}"/>
        <property name="testOnReturn" value="${ds.testOnReturn}"/>
        <property name="keepAlive" value="true"/>

        <property name="removeAbandoned" value="${ds.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${ds.removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${ds.logAbandoned}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${ds.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${ds.maxPoolPreparedStatementPerConnectionSize}"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,wall,log4j"/>
    </bean>

    <!-- dataSource 配置 -->
    <bean id="qrtzDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${qrtz.jdbc.url}"/>
        <property name="username" value="${qrtz.jdbc.username}"/>
        <property name="password" value="${qrtz.jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${qrtz.ds.initialSize}"/>
        <property name="minIdle" value="${qrtz.ds.minIdle}"/>
        <property name="maxActive" value="${qrtz.ds.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${qrtz.ds.maxWait}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${qrtz.ds.minEvictableIdleTimeMillis}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${qrtz.ds.timeBetweenEvictionRunsMillis}"/>

        <property name="validationQuery" value="${qrtz.ds.validationQuery}"/>
        <property name="testWhileIdle" value="${qrtz.ds.testWhileIdle}"/>
        <property name="testOnBorrow" value="${qrtz.ds.testOnBorrow}"/>
        <property name="testOnReturn" value="${qrtz.ds.testOnReturn}"/>
        <property name="keepAlive" value="true"/>

        <property name="removeAbandoned" value="${qrtz.ds.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${qrtz.ds.removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${qrtz.ds.logAbandoned}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${qrtz.ds.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${qrtz.ds.maxPoolPreparedStatementPerConnectionSize}"/>
    </bean>

    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource"
          p:configLocation="classpath:mybatis-config.xml"
          p:mapperLocations="classpath:com/baicheng/fork/web/dao/*.xml"/>

    <!-- spring与mybatis整合配置，扫描所有dao，在单数据源的情况下可以不写sqlSessionFactoryBeanName -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.baicheng.fork.web.dao"
          p:sqlSessionFactoryBeanName="sqlSessionFactory"/>

    <!-- 对dataSource 数据源进行事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- 事务管理 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
            <tx:method name="select*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- aop 配置 -->
    <aop:config>
        <!-- 事务切面 -->
        <aop:pointcut id="serviceMethods" expression="execution(* com.baicheng.fork.web.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
        <!-- 日志切面 -->
        <aop:aspect id="logAspect" ref="logAdvice" order="1">
            <aop:before method="before"
                        pointcut="@annotation(org.springframework.web.bind.annotation.RequestMapping)"/>
            <aop:around method="around" pointcut="@annotation(org.springframework.web.bind.annotation.RequestMapping)"/>
            <aop:after-returning method="afterReturning" returning="retVal" arg-names="retVal"
                                 pointcut="execution(* com.baicheng.fork.web.controller.*.*(..))"/>
            <aop:after method="after"
                       pointcut="@annotation(org.springframework.web.bind.annotation.RequestMapping)"/>
        </aop:aspect>
    </aop:config>

    <bean id="logAdvice" class="com.baicheng.fork.web.util.aop.log.LogAdvice"></bean>

    <!-- quartz持久化存储 -->
    <bean id="crm_scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="dataSource">
            <ref bean="qrtzDataSource"/>
        </property>
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
        <property name="configLocation" value="classpath:quartz.properties"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="startupDelay" value="10"/>
        <property name="autoStartup" value="true"/>
    </bean>

    <!-- 定时任务 -->
    <!--<task:scheduled-tasks>-->
    <!-- 每天8点执行推送订单任务 -->
    <!--<task:scheduled ref="SCRMPushTask" method="pushOrders" cron="0 0 8 * * ? "/>-->
    <!-- 每天10点执行重新推送失败订单任务 -->
    <!--<task:scheduled ref="SCRMPushTask" method="retryPushOrders" cron="0 0 10 * * ? "/>-->
    <!-- 每天5点执行创建订单任务 -->
    <!-- <task:scheduled ref="sanMaoPushTask" method="createOrder" cron="0 0 5 * * ? "/> -->
    <!-- 每天6点执行重新创建订单任务 -->
    <!-- <task:scheduled ref="sanMaoPushTask" method="retryCreateOrder" cron="0 30 5 * * ? "/> -->
    <!-- 每天9点执行获取激活码任务 -->
    <!-- <task:scheduled ref="sanMaoPushTask" method="fetchActivationCodes" cron="0 0 9 * * ? "/> -->
    <!-- 每天11点执行发送短信任务 -->
    <!-- <task:scheduled ref="sanMaoPushTask" method="sendSMS" cron="0 0 11 * * ? "/> -->
    <!-- 每天每4个小时执行缓存订单（提单页）目的地城市数据-->
    <!--<task:scheduled ref="orderDestCitysTask" method="orderDestCitysMakeCache" cron="0 0 0/4 * * ?"/>-->
    <!--</task:scheduled-tasks>-->

    <!-- 配置使Spring采用CGLIB代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 启用对事务注解的支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- Cache配置 -->
    <cache:annotation-driven cache-manager="cacheManager"/>

    <bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
          p:configLocation="classpath:ehcache.xml"/>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
          p:cacheManager-ref="ehCacheManagerFactory"/>

    <bean id="cacheClientShard" class="com.nicetrip.redis.client.CacheClientShard"/>

    <!-- testing environment  -->
    <beans profile="test">
        <context:property-placeholder
                location="classpath*:db_test.properties,classpath*:qrtz_db_test.properties,classpath*:sd_test.properties,classpath*:sr_test.properties"
                system-properties-mode="OVERRIDE"/>
    </beans>
    <!-- production environment  -->
    <beans profile="online">
        <context:property-placeholder
                location="classpath*:db_prod.properties,classpath*:qrtz_db_prod.properties,classpath*:sd_prod.properties,classpath*:sr_prod.properties"
                system-properties-mode="OVERRIDE"/>
    </beans>

</beans>
